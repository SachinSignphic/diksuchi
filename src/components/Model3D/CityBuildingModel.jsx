/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useLayoutEffect, useRef } from "react";
import { useGLTF, PerspectiveCamera, useCamera } from "@react-three/drei";
import { TextureLoader, EquirectangularReflectionMapping, ACESFilmicToneMapping, Mesh } from "three"
import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader"
import { useFrame, useThree } from "@react-three/fiber";
import gsap from "gsap";

const modelURL = "/models/alpha_city_scene_cloud.glb"

export function Model(props) {
    const { nodes, materials } = useGLTF(modelURL);

    // cloud refs
    const cloudRRref = useRef()
    const cloudBackRef = useRef()
    const cloudCenterRef = useRef()
    const cloudCenter2Ref = useRef()
    const cloudLB = useRef()

    // buildings ref
    const b1 = useRef()
    const b2 = useRef()
    const b3 = useRef()
    const b4 = useRef()
    const b5 = useRef()
    const b6 = useRef()
    const b7 = useRef()
    const b8 = useRef()
    const b9 = useRef()
    const b10 = useRef()
    const b11 = useRef()
    const b12 = useRef()
    const b13 = useRef()
    const b14 = useRef()
    const b15 = useRef()
    const b16 = useRef()
    const b17 = useRef()
    const b18 = useRef()
    const b19 = useRef()
    const b20 = useRef()
    const dubaiBAARef = useRef()
    const nightBuildingRef = useRef()

    // loading transparent texture
    const transpTexture = new TextureLoader().loadAsync('/models/cb2.png').then((transparent) => {
        materials.Material.alphaMap = transparent
    })

    const { gl, scene, camera } = useThree()

    // useFrame((state) => {
    //     state.camera.rotation.y += (0.01 * (state.pointer.y) - state.camera.rotation.y)
    //     // state.camera.rotation.x = 0.01 * (state.pointer.x)
    //     // state.camera.position.z += 0.01
    //     state.camera.updateProjectionMatrix()
    // })

    useCamera((camera) => {
        console.log(camera)
    })

    useLayoutEffect(() => {
        if (gl && scene) {
            new RGBELoader().setPath('/models/').loadAsync('/moonless_golf_1k.hdr').then((texture) => {
                texture.mapping = EquirectangularReflectionMapping;

                texture.matrixAutoUpdate = true;
                texture.updateMatrix()
                texture.rotation = 20

                scene.background = texture;
                scene.environment = texture;
                scene.backgroundIntensity = 0.1;

                gl.toneMapping = ACESFilmicToneMapping
                gl.toneMappingExposure = 0.35
            })

            const tl = gsap.timeline()

            const thatArray = [
                b1.current.position,
                b2.current.position,
                b3.current.position,
                b4.current.position,
                b5.current.position,
                b6.current.position,
                b7.current.position,
                b8.current.position,
                b9.current.position,
                b10.current.position,
                b11.current.position,
                b12.current.position,
                b13.current.position,
                b14.current.position,
                b15.current.position,
                b16.current.position,
                b17.current.position,
                b18.current.position,
                b19.current.position,
                b20.current.position,
                dubaiBAARef.current.position,
                nightBuildingRef.current.position,
            ]
            tl.from(thatArray, { y: -300, duration: 2, stagger: 0.05, ease: "expo.inOut" })

            // tl.from(b2.current.position, { y: -300, duration: 4 }, `<+=${startPercent}`)
            // CLOUDS APROMA ANIMATE PANNIKO
            const cloudsTL = gsap.timeline({
                defaults: {
                    duration: 10, stagger: 0.5, yoyo: true, repeat: -1
                }
            })
            const cloudArrays =
                [
                    cloudRRref.current.position,
                    cloudCenterRef.current.position,
                    cloudCenter2Ref.current.position,
                ]
            const cloudArrays2 = [
                cloudBackRef.current.position,
                cloudLB.current.position,
            ]
            cloudsTL.fromTo(cloudArrays, { z: 100 }, { z: -100 })
            cloudsTL.fromTo(cloudArrays2, { z: -100 }, { z: 100, }, "<")
            // tl.from(cloudRRref.current.position, {z: -187, duration: 6 })
            // tl.from(cloudBackRef.current.position, { z: cloudBackRef.current.position + 100, duration: 6 })
        }

    }, [gl, scene])

    return (
        <group {...props} dispose={null}>
            <PerspectiveCamera
                makeDefault={true}
                far={10000}
                near={0.1}
                fov={8.515}
                position={[813.792, 56.695, -43.139]}
                rotation={[-2.98, 1.52, 2.978]}
                scale={68.043}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.cloud_rr.geometry}
                material={materials.Material}
                position={[84.699, 36.697, -52.746]}
                rotation={[0, -0.48, -0.379]}
                scale={-50.707}
                ref={cloudRRref}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.cloub_back.geometry}
                material={materials.Material}
                position={[-44.243, 73.895, -4.109]}
                rotation={[0, -0.48, -0.379]}
                scale={-50.707}
                ref={cloudBackRef}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.cloud_center.geometry}
                material={materials.Material}
                position={[25.717, 36.697, -19.982]}
                rotation={[Math.PI, -0.948, -2.435]}
                scale={-50.707}
                ref={cloudCenterRef}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.cloud_center2.geometry}
                material={materials.Material}
                position={[-9.26, 42.068, -3.823]}
                rotation={[-0.135, 0.143, 0.156]}
                scale={-50.707}
                ref={cloudCenter2Ref}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.cloud_left_back.geometry}
                material={materials.Material}
                position={[-40.59, 82.559, 7.526]}
                rotation={[0.512, -0.062, -1.63]}
                scale={-50.707}
                ref={cloudLB}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Building_square_lambert1_0.geometry}
                material={materials.lambert1}
                position={[-70.24, 0, 33.772]}
                rotation={[0, -0.531, 0]}
                scale={0.007}
                ref={nightBuildingRef}
            />
            <group
                position={[27.152, 47.693, -65.042]}
                rotation={[0, -1.135, 0]}
                scale={0.223}
                ref={dubaiBAARef}
            >
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.heloPad__0.geometry}
                    material={materials.heloPad__0}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.heloPad__0_1.geometry}
                    material={materials.sails}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.heloPad__0_2.geometry}
                    material={materials.white_structure}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.heloPad__0_3.geometry}
                    material={materials.rooms}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.heloPad__0_4.geometry}
                    material={materials.heloPad}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.heloPad__0_5.geometry}
                    material={materials.base}
                />
            </group>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["12"].geometry}
                material={materials.material}
                position={[8.2, 0.303, -18.739]}
                rotation={[0, 1.102, 0]}
                scale={[30.892, 28.615, 30.892]}
                ref={b12}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["10"].geometry}
                material={materials.material}
                position={[-6.947, 0.365, -9.434]}
                rotation={[0, 1.102, 0]}
                scale={34.319}
                ref={b10}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["6"].geometry}
                material={materials.material}
                position={[-5.11, 0.342, 11.803]}
                rotation={[Math.PI, -1.102, Math.PI]}
                scale={34.319}
                ref={b6}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["18"].geometry}
                material={materials.material}
                position={[-4.785, 0.362, -47.055]}
                rotation={[0, 1.102, 0]}
                scale={34.319}
                ref={b18}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["7"].geometry}
                material={materials.material}
                position={[12.438, 11.993, 25.111]}
                rotation={[0, 1.102, 0]}
                scale={51.348}
                ref={b7}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["9"].geometry}
                material={materials.material}
                position={[8.864, 0.394, -0.655]}
                rotation={[0, 1.102, 0]}
                scale={24.922}
                ref={b9}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["20"].geometry}
                material={materials.material}
                position={[-10.997, 0.201, -60.397]}
                rotation={[0, 1.102, 0]}
                scale={80.508}
                ref={b20}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["4"].geometry}
                material={materials.material}
                position={[24.85, 0.295, 30.167]}
                rotation={[0, 1.102, 0]}
                scale={[19.744, 18.88, 19.744]}
                ref={b4}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["16"].geometry}
                material={materials.material}
                position={[8.896, 0.319, -36.931]}
                rotation={[0, 1.102, 0]}
                scale={34.319}
                ref={b16}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["15"].geometry}
                material={materials.material}
                position={[-31.702, 10.151, -29.898]}
                rotation={[0, 1.102, 0]}
                scale={50.224}
                ref={b15}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["13"].geometry}
                material={materials.material}
                position={[38.934, 0.328, -11.905]}
                rotation={[0, 1.102, 0]}
                scale={[1.959, 3.546, 1.959]}
                ref={b13}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["2"].geometry}
                material={materials.material}
                position={[-6.871, 0.244, 48.971]}
                rotation={[0, 1.102, 0]}
                scale={34.319}
                ref={b2}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["11"].geometry}
                material={materials.material}
                position={[28.584, 0.248, -9.395]}
                rotation={[0, -0.469, 0]}
                scale={32.106}
                ref={b11}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["1"].geometry}
                material={materials.material}
                position={[-6.221, 0.476, 66.938]}
                rotation={[Math.PI, -1.102, Math.PI]}
                scale={[50.498, 63.443, 50.498]}
                ref={b1}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["17"].geometry}
                material={materials.material}
                position={[32.656, 0.295, -42.744]}
                rotation={[0, 1.102, 0]}
                scale={[19.744, 18.88, 19.744]}
                ref={b17}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["3"].geometry}
                material={materials.material}
                position={[32.869, 0.253, 37.95]}
                rotation={[-Math.PI, 0.469, -Math.PI]}
                scale={43.338}
                ref={b3}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["5"].geometry}
                material={materials.material}
                position={[29.986, 0.303, 20.883]}
                rotation={[-Math.PI, 0.469, -Math.PI]}
                scale={3.861}
                ref={b5}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["8"].geometry}
                material={materials.material}
                position={[30.544, 0.303, 4.521]}
                rotation={[-Math.PI, 0.469, -Math.PI]}
                scale={3.295}
                ref={b8}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["19"].geometry}
                material={materials.material}
                position={[15.637, -4.104, 46.858]}
                rotation={[0, 1.102, 0]}
                scale={[30.892, 28.615, 30.892]}
                ref={b19}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["14"].geometry}
                material={materials.material}
                position={[42.295, 0.253, -22.707]}
                rotation={[Math.PI, -1.102, Math.PI]}
                scale={43.338}
                ref={b14}
            />
        </group>
    );
}

useGLTF.preload(modelURL);
